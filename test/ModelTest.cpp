#include <random>
#include "gtest/gtest.h"
#include "iostream"
#include "Model.h"
#include "Result.h"

/*
 * Test for performing Breusch-Pagan model
 * */

TEST(ModelTest, fit) {
  jlst::Result result;
  std::vector<double> dosages =
      {0, 2, 0, 2, 1, 1, 1, 0, 0, 2, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 2, 2,
       0, 1, 0, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 1, 2, 1, 0, 2, 0, 0, 1, 1, 1, 0,
       2, 0, 0, 1, 2, 0, 1, 1, 1, 1, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 0, 1, 0, 1,
       0, 2, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 0, 0, 2, 2, 0, 1, 1, 0, 0, 0, 1, 0, 1, 2, 2, 0, 2, 1, 0, 0,
       0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 1, 2, 1, 0, 1, 1, 0, 0, 2, 0, 0, 1, 1, 1, 1, 2, 0, 1, 2, 1, 1,
       0, 2, 1, 1, 2, 1, 1, 0, 1, 1};
  std::vector<double> pheno =
      {0.522282168524833, -0.733444783898363, -0.440526196202908, 0.265371731726908, 0.245577557056356,
       0.0177958058351542, 1.30149310667468, 0.343958352102906, -0.329072974464988, 2.60086243542467, -1.33155474622707,
       -0.554471766004212, 1.32029371983474, 2.76101705333168, 2.40001522281404, -0.318614836624122, -0.321480684139647,
       -0.767082663598979, 3.78554521125437, -0.282722930334343, 1.53832195482828, 1.63662505007416, 1.95084301107349,
       0.474943044148217, -2.18594644011259, 0.560101821753242, 0.475435421232725, 0.390281600028403, -1.64674444846184,
       0.986555948076592, 1.42398359867007, 1.26829424321999, 0.929623663028066, 0.860124249616191, 2.19173404312252,
       0.0567613873028975, -2.0980964197589, 2.87372399561641, 0.499881065667666, 0.504717571719967, 2.07670993327744,
       -0.757131534328435, 0.845115059328578, 0.532788293060056, 0.196581370607713, 0.446984647751987,
       -1.77610715191633, 1.30962686375289, -1.79129317629329, 0.77890003053602, -0.974810955208034,
       -0.0867079053484027, -1.07262121175692, -1.25674926317035, 1.05773736712652, -0.360320800556423,
       0.350593765015391, 0.116431247868507, 0.794577579396704, -1.00442236398943, -0.375823436339545,
       -1.35800921865321, 0.580840436472871, -0.189622581277104, -0.53915571084582, 0.774648635121182, 1.59351042943964,
       1.24939804122191, 0.672614533611014, 0.261962170651764, -0.146026391952837, 1.70143183167595, 0.774936296712015,
       1.33181037281358, -0.0150523735541714, -0.77890222515892, 4.54249367899628, -1.96454419520035, 0.769170668260007,
       1.51468408796132, -0.943608363269171, -0.102580508795901, 0.422275248111546, 0.387852218138119, 1.25154962078682,
       0.175868143447178, 0.904243556201491, 2.24203613746722, -1.19512289061954, -0.419775681442288, 1.98014453415252,
       0.49817216339198, 0.84827267890955, -0.367202719244542, 0.262331084814879, 0.262704124824336, 0.640738877993306,
       0.307089830771924, -0.00298796300005504, -1.08406588166769, 0.097825799689833, 0.00214395093177762,
       1.12649047445806, -1.00177908621909, -0.61722192863403, 1.51365714221049, -0.084818645674312, 0.86238682820237,
       -0.866695166666649, -0.780991171137077, -0.971229202960724, -0.364357068272204, 1.20468703481302,
       1.52001204605232, -0.882457683653546, 0.903843347234973, 1.64216476011066, -0.930628616693406, -2.05710369928894,
       1.40842428122359, 0.514242102223054, 0.293168380759209, -0.364557590673709, 0.207142723762983, 1.2280774574073,
       -0.430012569304131, 1.66115388475746, -0.473218202854268, 2.38423921186158, 0.609058662925924,
       -0.494970909078799, -0.0476483564726301, 0.170678010698749, -1.22507132610198, 1.96253111592354,
       0.527037409716119, 2.23912608412108, 0.811947009557344, 1.43753313723797, 1.93544276888011, 0.394249899631979,
       0.632521494371694, 0.237713722248585, 1.01021099822561, 1.43759181651186, 1.94052275386464, 2.76854130103106,
       -2.19720851198184, 1.62049002472244, -0.319919526758045, 0.713078103934547, 1.02826853911963, -0.570632725418573,
       -0.963074630938342, 1.13822534730999, 1.20354481603093, 1.49618269695644, -0.13370613765271, -1.26730924193154,
       0.352538646178498, -1.28618864655408, -0.272522855069837, 0.561081951167926, -0.88181286823508, 1.0010134523136,
       -0.855250672623498, -0.39218892406871, -0.357256897642985, -2.07823365938166, -0.23327893210657,
       1.14713317970088, -0.143740447902018, -2.23662183763668, -0.36845734747721, 1.26174520573737, -0.497579143100874,
       -0.601027404256258, -0.298973681726613, -0.00493237975734888, -0.0971479127091374, -0.598186625596728,
       0.248791991366527, -0.341906593636612, 1.63919446494069, -0.107699480044712, 0.210930786953303, 1.09347128117793,
       -0.0601276594760702, 0.993321761309973, 0.939634459164335, -1.16278371681341, 0.612367332023045,
       -0.0667603749217124, -1.50640197948602, -0.768897643472178, 0.61137004449463, -1.67139577461645,
       -0.846710740540237, -0.26177714473706, 0.234486767492085};
  Eigen::MatrixXd X;
  Eigen::VectorXd y;

  // initialise empty matrix
  assert(dosages.size() == pheno.size());
  for (unsigned n = 0; n < dosages.size(); ++n) {
    X(n, 0) = 1;
    X(n, 1) = 0;
    y(n) = pheno[n];
  }

  // fit B-P model
  jlst::Model::fit(result, dosages, X, y);

  std::cout << result.beta << std::endl;
  std::cout << result.se << std::endl;
  std::cout << result.pval << std::endl;

  // check output
  ASSERT_NEAR(result.beta, 0, 0.01);
  ASSERT_NEAR(result.se, 0, 0.01);
  ASSERT_NEAR(result.pval, 0, 0.01);
}