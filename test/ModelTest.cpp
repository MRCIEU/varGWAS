#include <random>
#include "gtest/gtest.h"
#include "iostream"
#include "Model.h"

/*
 * Test for performing Breusch-Pagan model
 * */

TEST(ModelTest, fit) {
  Result result;
  std::vector<double> dosages =
      {1, 2, 1, 1, 0, 1, 1, 0, 2, 2, 1, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
       1, 0, 0, 1, 0, 2, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 1, 1, 1, 2, 0, 1, 1, 1, 1, 0, 2, 2, 0, 1, 1, 1, 2, 0,
       0, 1, 1, 1, 2, 0, 1, 1, 0, 1, 2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 2, 0, 2, 1, 2, 0, 1, 1,
       2, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 2, 1, 0, 0, 1, 1, 1, 1, 0, 2, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0,
       2, 0, 0, 1, 1, 0, 0, 1, 0, 2, 1, 1, 0, 1, 1, 1, 0, 2, 0, 2, 1, 1, 0, 1, 0, 1, 1, 2, 1, 0, 1, 2, 0, 2, 0, 1, 2, 0,
       2, 2, 1, 2, 1, 0, 2, 1, 1, 1};
  std::vector<double> pheno =
      {-1.66789800792786, -0.478869475680416, 0.0789831961581414, 0.204693247443291, 0.488169885316856,
       0.351426696646782, 0.980814062987502, -1.62212327687907, 1.48235037743029, 0.209677483069101, -1.121998323769,
       0.0366212023305321, -0.336997738910697, 1.11691415848265, -0.660350380044291, 0.683053766550444,
       -0.144704703458337, 0.533368090655584, 0.836307289710206, 0.138510650187177, 1.31796962130557,
       -0.780887698544065, -1.06375514072915, 1.910683315852, -0.0328630945809129, 0.201073100600976,
       -0.698380862188483, -0.437500611944236, -0.719087417049352, -0.274989184175191, 0.896917771379762,
       -0.639743485915617, -0.0761318177708126, 1.23114591833992, 0.27295650317386, -2.4315371087511, 0.629966118259303,
       -2.04538448176396, 0.227460824262129, 1.77872992448464, 0.887892531748101, -0.913934505183743,
       -0.302633705669694, 0.149701031749574, -2.40953049554883, 0.257452383651025, -2.43466066379944,
       0.195963354871618, -0.573889841083253, 0.277072702622078, 0.263804022281031, -0.493097715898626,
       -0.531691621911837, -0.288876743563497, 2.24098756115799, -0.114853408689007, -1.47953143349966,
       0.614007645477191, -0.733909322495168, 1.05769947957197, -1.78000315803147, -2.02320527265305, -1.18370158132938,
       0.0262417864742887, -1.93043370088356, 1.44716226980717, -0.976848533787963, -0.0780482412004461,
       -0.868557618685946, -1.35251567573489, 0.205669611113592, -0.347566198121294, 1.24816113407651,
       -0.68239488603649, 0.182315610934135, -1.38842423777879, 0.310031749366831, 0.168434221108331,
       -0.297220692962174, 0.326415683006815, -0.0361198771902398, 0.119870961743243, 1.60594308893311,
       -0.11696085353068, -0.554761433744087, 1.09183643422467, -1.86603522603608, -0.652812526096487,
       0.0503359341096167, -2.15448583533603, 1.04198422272303, 0.240304173890825, -0.178563048385202,
       -2.01171066394144, 0.00495424267254019, -0.997170337995326, -1.55986607784127, -0.0896871476964835,
       0.403705380851042, -0.516819204800093, -0.0669942053608115, -2.56005244041801, 0.0728007835118976,
       0.727195993898367, -0.128248880882147, -0.487866725172139, 1.24650515302007, -1.85246414834352,
       -0.33627929734223, -0.592966224021421, -0.378718274386603, 1.18345966271718, -0.956981549348883,
       0.364238214106648, 0.629970671686287, 0.0119610482170529, -0.206807563344132, 1.20886000041794,
       0.259701560596734, -2.00665513473178, -1.81561079116872, -0.0696334093033284, -0.0607272386919699,
       0.991873728143753, -1.41866292364987, -0.465444880667987, 0.213509740708371, -0.326659853155907,
       1.40296413774861, -1.14774593677707, -1.9058968703214, -1.46767765821002, -0.216348650591261, 1.26279177573768,
       0.588393612936397, -0.33782614294641, -2.69840812225147, -1.0185528402395, -1.08266504163199, -0.514005540936609,
       -0.741466194021958, -0.32812046468443, -1.56338326017614, -1.62614115828474, -0.976897236736441,
       -0.688621185218777, 1.44012554349709, -0.5638584748324, -1.56293418000864, 0.234661436778458, -1.98376052979519,
       0.978032468135692, -0.185825923920682, -0.226813295358415, 0.422330330420586, -0.669785724973112,
       -0.978339676099611, -0.264942385461725, -0.553388216335727, -1.00571887752799, 0.325086640286445,
       -2.23052537522007, 0.288510568796335, 1.99687712465821, 1.58317807955344, 0.0127735650925839, -1.39126100340567,
       -0.724306070945065, -1.08930159997221, -0.215922579390309, 0.902150871456811, -0.936521746493211,
       0.210711471905251, -0.642091154449696, 0.797873692753666, 1.21957835007847, 0.8349570023395, -0.120484051589383,
       1.43237806785819, 1.44774566614403, -0.646754188606299, -0.884331318677036, 1.81052564260287, -0.294957190690455,
       0.585640905630645, -0.175211682399631, -0.319014908963697, -0.140448332547248, -0.38471883929947,
       -1.22315981348816, 0.212086154383909, 0.193245159766965, 0.309455012628878, -1.75334998465134, -1.23919039636936,
       -0.0677214749205774, 0.0585514878501114, -1.55296170306771, -0.510703066870012, 0.887576428351752};
  Eigen::MatrixXd X;
  Eigen::VectorXd y(pheno);

  // initialise empty matrix
  for (unsigned n = 0; n < dosages.size(); ++n) {
    X(n, 0) = 1;
    X(n, 1) = 0;
  }

  // fit B-P model
  fit(result, dosages, X, y);

  // check output
  ASSERT_NEAR(result.beta, 0, 0.01);
  ASSERT_NEAR(result.se, 0, 0.01);
  ASSERT_NEAR(result.pval, 0, 0.01);
}